# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oO8SS3ZhzK9ZuET2Iij9KwCl8yfIzgJ9
"""

import os
import requests
import json
import yt_dlp
from faster_whisper import WhisperModel
from fpdf import FPDF

# ✅ Enter Your OpenRouter API Key
API_KEY = "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"  # Replace with your actual OpenRouter API key

# ✅ Function to Download YouTube Audio
def download_audio(youtube_url):
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': 'audio.%(ext)s',
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
        'quiet': False
    }

    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([youtube_url])

    return "audio.mp3"

# ✅ Function to Transcribe Audio Using Whisper
def transcribe_audio(audio_path):
    model = WhisperModel("base", device="cpu")
    segments, _ = model.transcribe(audio_path)

    transcript = "\n".join([segment.text for segment in segments])
    return transcript

# ✅ Function to Summarize the Transcript Using OpenRouter (DeepSeek R1)
def summarize_text(text):
    response = requests.post(
        url="https://openrouter.ai/api/v1/chat/completions",
        headers={
            "Authorization": f"Bearer {API_KEY}",
            "Content-Type": "application/json",
            "HTTP-Referer": "https://colab.research.google.com",
            "X-Title": "YouTube Summarizer",
        },
        data=json.dumps({
            "model": "deepseek/deepseek-r1-distill-llama-70b:free",
            "messages": [
                {"role": "system", "content": "Summarize this transcript into structured bullet points with timestamps and a Q&A section."},
                {"role": "user", "content": text}
            ],
        })
    )

    # Debugging Output
    print("API Response:", response.json())

    return response.json().get("choices", [{}])[0].get("message", {}).get("content", "Error: No content received.")

# ✅ Function to Save Summary as PDF
def save_as_pdf(text, filename="YouTube_Notes.pdf"):
    pdf = FPDF()
    pdf.set_auto_page_break(auto=True, margin=15)
    pdf.add_page()

    # Use a Unicode font
    pdf.add_font('DejaVu', '', '/usr/share/fonts/truetype/dejavu/DejaVuSans.ttf', uni=True)
    pdf.set_font('DejaVu', '', 12)



    for line in text.split("\n"):
        pdf.multi_cell(0, 10, line)

    pdf.output(filename, "F")
    print(f"✅ PDF saved as {filename}")


# ✅ Function to Save Summary as Markdown
def save_as_markdown(text, filename="YouTube_Notes.md"):
    with open(filename, "w", encoding="utf-8") as file:
        file.write(text)
    print(f"Markdown file saved as {filename}")

# ✅ Main Execution
youtube_url = input("Enter YouTube URL: ")
audio_path = download_audio(youtube_url)
transcript = transcribe_audio(audio_path)
summary = summarize_text(transcript)

# Save the summary
save_as_pdf(summary)
save_as_markdown(summary)

!apt-get install -y fonts-dejavu-core